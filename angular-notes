Standalone components vs module based components (older component format)
zone.js - used by angular for change detection and state management
Zone.js notifies angular about user events, expired timers etc. It combines components into invisible "zones".
Signals - supported since Angular 16
Components are directives. Custom directives with templates
[(ngModel)] - two way binding
Inputs in angular will always yield string values.
Angular modules exist for historic reasons. In Angular 2 there were no standalone components.
We can mix standalone components and modules
Host element - Every angular component has a host element.
:host - The :host CSS pseudo-class selects the shadow host of the shadow DOM containing the CSS it is used inside. This selector works with the default view encapsulation of Angular. If we use ViewEncapsulation.None there'll be no shadow dom encapsulating element.
viewChild / viewChildren - only allows you to select content that is in the template (e.g. ng-content projected elements aren't included)
contentChild / contentChildren -

@for (ticket of tickets; track ticket.id) {
	<li>
		<app-ticket /> - {{ $first }}
	</li>
} @empty { //this renders in case the tickets collection is empty
	<p>No tickets available.</p>
}

$first - special variable we can use in @for blocks which is a boolean and returns true if the element is first in the collection
$last - special variable we can use in @for blocks which is a boolean and returns true if the element is last in the collection
$odd - special variable we can use in @for blocks which is a boolean and returns true if the element has odd index in the collection
$even - special variable we can use in @for blocks which is a boolean and returns true if the element is has even index in the collection
$count - outputs element count

There are two types of directives in Angular. Attribute directives modify the appearance or behavior of DOM elements. Structural directives add or remove elements from the DOM.

*appAuth - syntactic sugar for structural directives. It amounts to:
<ng-template appAuth="admin"> <!-- the value code here gets treated like TypeScript, not just a string --!>

</ng-template>

pure setting in custom pipes - false by default. When set to true the output caching is disabled.

Services should be annotated with @Injectable
providedIn - injectable scope

Angular supports multiple notes
ElementInjector
ModuleInjector
Application root EnvironmentInjector
Platform EnvironmentInjector

We can use the providers property of the @Component annotation to inject services. But in this case Angular IOC will provide a new instance for each component of the service.

In development mode Angular runs change detection twice to track unwanted changes.
When a timer expires a change dection runs
We can opt out of zones.js change detection:
private zone = inject(NgZone);
this.zone.runoutsideAngular(() => ... )
This is also known as avoiding zone pollution
OnPush change detection strategy - the component for which we have enabled it will only ever change because an event occured inside this subcomponent tree (in the current component or components we have imported in the 'imports' array )
Signal changes also lead to the current component being changed.

Observables only start when you have atleast one subscriber
Observables -> values over time
Signals -> values in a container
you can read the value in a signal at any point in time.
